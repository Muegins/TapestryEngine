#ifndef ACTORCOLLISION_H
#define ACTORCOLLISION_H

#include "Utils.h"
#include "Console.h"
#include "DiagnosticDraw.h"
#include "Event.h"
#include "Actor.h"

#define MAX_ACTORS 1024

#define CELLS_X 10
#define	CELLS_Y 4
#define CELL_COUNT (CELLS_X*CELLS_Y)

class SpatialMonitor : public EventReceiver
{
public:

	SpatialMonitor() : mActorCount(0), mAdjacentActorCount(0)
	{
	}

	SpatialMonitor(int worldH, int worldW) : mActorCount(0), mAdjacentActorCount(0)
	{
		PartitionCells(worldH, worldW);
	}

	bool VecLogActor(Actor& act)
	{
		//mvActors.push_back( &act );
		//act.SetSpatID(mActorCount);
		mActorCount += 1;
		return true;
	}

	int* GetAdjacentCells(int cellnum, int cells[9]);

	bool LogActor(Actor& act); //Logs an actor with the spatial monitor. called on program startup 

	bool EventProcess(Event eve);

	SDL_Rect GetCell(int i) //Gets the cell rect of a cell number
	{
		return mCells[i];
	}

protected:

	bool PartitionCells(int worldH, int worldW); //divides the level into cells based on macro parameters

	bool GetActorsInCell(int cellnum);

	bool GetAdjacentActors(int cellnum);

	bool DetectActorCollision(int id1, int id2); //checks two logged actors for intersection

	bool DetectRectSensors(SDL_Rect* sensor, int detectorID, int foreignID); //Called in HandleRectSensors, checks given rectangle for intersects

	int UpdateActorCell(int id); //Updates the the cell number that contains a logged actor, Called when an MOVED_THIS_FRAME event is processed

	int GetActorCell(int id) //Gets the cell number of an actor
	{
		return mActorCells[id];
	}

	//int* GetAdjacentCells(int cellnum, int cells[9]); //populates and returns cells[9] with the cell numbers of cellnum and the 8 surrounding cells

	bool HandleCollisions(int CallerID); //Called in event process, finds the actors in the cells adjacent to the cell of CallerID and checks them for collision with CallerID
	
	bool HandleRectSensors(SDL_Rect* sensor, int CallerID, SensorType SeType);

	bool TestBlockers(SDL_Rect* sensor, int CallerID);


	Actor* mActors[MAX_ACTORS];
	int mActorCells[MAX_ACTORS];
	SDL_Rect  mCells[CELL_COUNT];
	int mActorCount;
	int mAdjacentActorIDs[MAX_ACTORS];
	int mAdjacentActorCount;
};

#endif

